{# templates/facial_recognition_page.html.twig #}

{% extends 'base.html.twig' %}
{% block body %}
    <h1>Page de Reconnaissance Faciale</h1>

    <div class="form-group">
        <label for="facial_recognition">Activer la reconnaissance faciale</label>
        <input type="checkbox" id="facial_recognition" name="facial_recognition" value="1">
    </div>

    <div id="camera-controls" style="display: none;">
        <button type="button" id="take-photo">Prendre une photo</button>
        <video id="camera-stream" width="300" height="200" autoplay></video>
    </div>

    {# Champ pour télécharger l'image de l'utilisateur (optionnel, selon votre logique) #}
    <div class="form-group">
        <label for="user_image">Image de l'utilisateur</label>
        <input type="file" id="user_image" name="user_image">
        <a href="{{ path('app_signup') }}" style="background-color: green; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">Se Connecter</a>
    </div>
    <div style="position: fixed; top: 20px; right: 20px;">
        <a href="{{ path('app_signup') }}" style="background-color: green; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">Se Connecter</a>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            var facialRecognitionCheckbox = document.getElementById("facial_recognition");
            var cameraControls = document.getElementById("camera-controls");
            var takePhotoButton = document.getElementById("take-photo");
            var cameraStream = document.getElementById("camera-stream");
            var userImageInput = document.getElementById("user_image"); // Ajoutez cette ligne

            // Gérer le changement d'état de la case à cocher
            facialRecognitionCheckbox.addEventListener("change", function () {
                if (facialRecognitionCheckbox.checked) {
                    // Activer la reconnaissance faciale, afficher les contrôles de la caméra
                    cameraControls.style.display = "block";
                    startCamera();
                } else {
                    // Désactiver la reconnaissance faciale, masquer les contrôles de la caméra
                    cameraControls.style.display = "none";
                    stopCamera();
                }
            });

            // Gérer le clic sur le bouton "Prendre une photo"
            takePhotoButton.addEventListener("click", function () {
                // Capturez la photo depuis la caméra ici
                capturePhoto();
            });

            // Fonction pour démarrer la caméra (à implémenter selon vos besoins)
            function startCamera() {
                navigator.mediaDevices.getUserMedia({ video: true })
                    .then(function (stream) {
                        cameraStream.srcObject = stream;
                    })
                    .catch(function (error) {
                        console.error("Erreur lors du démarrage de la caméra: ", error);
                    });
            }

            // Fonction pour arrêter la caméra (à implémenter selon vos besoins)
            function stopCamera() {
                var tracks = cameraStream.srcObject.getTracks();
                tracks.forEach(function (track) {
                    track.stop();
                });
                cameraStream.srcObject = null;
            }

            // Fonction pour capturer la photo
            function capturePhoto() {
                // Vous devrez ajouter la logique pour capturer la photo depuis la caméra ici

                // Après la capture, vous pouvez envoyer la photo au serveur
                var photoDataUrl = captureImageData(); // À implémenter selon votre logique

                // Envoyer la photo au serveur (vous pouvez utiliser AJAX ou FormData)
                sendPhotoToServer(photoDataUrl);
            }

            // Fonction pour récupérer les données de l'image capturée (exemple de base64)
            function captureImageData() {
                var canvas = document.createElement("canvas");
                canvas.width = cameraStream.videoWidth;
                canvas.height = cameraStream.videoHeight;
                var context = canvas.getContext("2d");
                context.drawImage(cameraStream, 0, 0, canvas.width, canvas.height);
                return canvas.toDataURL("image/jpeg"); // Format de l'image (vous pouvez ajuster selon vos besoins)
            }

            // Fonction pour envoyer la photo au serveur
            function sendPhotoToServer(photoDataUrl) {
                // Vous pouvez utiliser XMLHttpRequest ou fetch pour envoyer la photo au serveur
                // Exemple avec fetch :
                fetch('{{ path('app_facial_recognition') }}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ photo: photoDataUrl }),
                })
                    .then(response => response.json())
                    .then(data => {
                        // Traitez la réponse du serveur
                        console.log(data);
                    })
                    .catch(error => {
                        console.error('Erreur lors de l\'envoi de la photo au serveur:', error);
                    });
            }
        });

    </script>

{% endblock %}
